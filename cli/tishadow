#!/usr/bin/env node
var
    api      = require('./support/api'),
    compiler = require('./support/compiler'),
    colors   = require('colors'),
    config   = require('./support/config'),
    pkginfo  = require('pkginfo'),
    program  = require('commander')
    ;


pkginfo(module, 'name', 'version');

program
  .version(module.exports.version, '-v, --version')
  .description('TiShadow CLI')
  .usage('COMMAND [OPTIONS]');

program.command('server')
  .description('start the TiShadow server'.grey)
  .option('-p, --port <port>', 'server port')
  .option('-l, --long-polling', 'force long polling')
  .action(function(env) {
    config.init(env);
    require("../server/app.js");
  });

program.command('clear')
  .description('clear the application cache on all connected devices'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .action(api.clearCache);

program.command('run')
  .description('deploy full application to all connected devices'.grey)
  .option('-u, --update', 'only send recently changed files')
  .option('-a, --patch', 'patch updated files without causing app restart')
  .option('-l, --locale <locale>', 'set the locale in in the TiShadow app')
  .option('-j, --jshint', 'analyse code with JSHint')
  .option('-t, --tail-logs', 'tail server logs on deploy')
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .action(compiler);

program.command('bundle')
  .description('prepare a TiShadow bundle without deploying it'.grey)
  .option('-j, --jshint', 'analyse code with JSHint')
  .action(compiler);

program.command('spec')
  .description('run jasmin spec tests on all connected devices'.grey)
  .option('-u, --update', 'only send recently changed files')
  .option('-l, --locale <locale>', 'set the locale in in the TiShadow app')
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-j, --jshint', 'analyse code with JSHint')
  .option('-x, --junit-xml','output report as JUnit XML')
  .action(compiler);

program.command('repl')
  .description('launch REPL'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .action(api.sendSnippet);

program.command('log')
  .description('tail server logs'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .action(function(env) {
    config.init(env);
    require('./support/socket').connect();
  });

program.command('config')
  .description('set default configuration settings'.grey)
  .option('-o, --host <host>', 'set default server host name / ip address')
  .option('-p, --port <port>', 'set default server port')
  .option('-r, --room <room>', 'set default server room')
  .action(config.write);

program.command('app')
  .description('generate a titanium project with TiShadow app source code'.grey)
  .option('-d, --destination <path>', 'target path for generated project')
  .action(function(env) {
    program.prompt("Enter app id [com.yydigital.tishadowapp]: ", function(appid) {
      env.appid = appid.trim() || "com.yydigital.tishadowapp";
      require('./support/appify').copyCoreProject(env);
      process.stdin.destroy();
    });
  });

program.command('appify')
  .description('generate an appified TiShadow app'.grey)
  .option('-d, --destination <path>', 'target path for generated project')
  .option('-o, --host <host>', 'set server host name / ip address')
  .option('-p, --port <port>', 'set server port')
  .option('-r, --room <room>', 'set server room')
  .action(require('./support/appify').build);

program.command('watch')
  .description('monitor current directory and run on file save'.grey)
  .action(function(env) {
    // config.init(env);
    require('./support/watch').watch(env);
  });


program.parse(process.argv);

// Display help on an invalid command
if (program.args.length === 0 || typeof program.args[program.args.length -1] === 'string'){
  program.help();
}


